FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY apps/backend/package*.json ./

# Install all dependencies
RUN npm ci

# Copy source code
COPY apps/backend/src ./src
COPY apps/backend/nest-cli.json ./
COPY apps/backend/tsconfig*.json ./

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS runtime

# Set working directory
WORKDIR /app

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Install dumb-init for proper signal handling and security updates
RUN apk add --no-cache dumb-init curl && \
    apk upgrade --no-cache

# Copy package files
COPY apps/backend/package*.json ./

# Install only production dependencies
RUN npm ci --only=production && \
    npm cache clean --force && \
    rm -rf /tmp/*

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Create logs directory and set proper permissions
RUN mkdir -p logs && \
    chown -R nestjs:nodejs logs && \
    chmod 755 logs

# Remove unnecessary files
RUN rm -rf /var/cache/apk/*

# Switch to app user
USER nestjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/api/v1/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main.js"]